/* Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

Sample Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

*/

public class ListNode {
      int val;
      ListNode next;
      ListNode() {}
      ListNode(int val) { this.val = val; }
      ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 }
 class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
       
     if(head==null || head.next==null || k<=1)  return head;
        
     ListNode cur=head;
        
     for(int i=0;i<k;i++){
         if(head==null)  return cur;
         head=head.next;
     }   
     head=cur;
     ListNode nextNode=head.next;
        head.next=null;
        for(int i=0;i<k-1;i++){
            ListNode temp=nextNode.next;
            nextNode.next=head;
            head=nextNode;
            nextNode=temp;
        }
        cur.next=reverseKGroup(nextNode,k);
        return head;
    }    
}
 
